<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!--公共库配置 事务及服务-->
	<bean id="datasource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_user}" />
		<property name="password" value="#{T(com.zengshi.paas.utils.CipherUtil).decrypt('${jdbc_password}')}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${db.initialSize}" />
		<property name="minIdle" value="${db.minIdle}" />
		<property name="maxActive" value="${db.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${db.validSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<!--<property name="filters" value="stat" />-->
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,stat,log4j" />
	</bean>


    <bean id="sqlSessionCommon" class="org.mybatis.spring.SqlSessionTemplate">
	  <constructor-arg index="0" ref="sqlSessionFactoryCommon" />
	</bean>

    <bean id="sqlSessionFactoryCommon" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="datasource" />
        <property name="mapperLocations" value="#{configProperties.getValue('ecp.mapper.loc','classpath*:sqlMapper/${database.name}/**/*.xml')}" />
        <property name="databaseIdProvider" ref="ecpFrameVendorDatabaseIdProvider"></property>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryCommon"/>
        <property name="basePackage" value="#{configProperties.getValue('ecp.mapper.pkg','com.zengshi.ecp.*.dao.mapper')}" />
    </bean>

    <bean id="jdbcTemplateCommon" class="org.springframework.jdbc.core.JdbcTemplate">
    	<property name="dataSource" ref="datasource"/>
    </bean>
    <!--事务管理DataSourceTransactionManager-->
    <bean id="txManagerCommon" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="datasource" />
    </bean>
  	<bean id="transactionTemplate1" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager">
			<ref local="txManagerCommon" />
		</property>
	</bean>

    <!--启动spring注解功能-->
    <tx:annotation-driven transaction-manager="txManagerCommon" />

	<!-- aop事务配置，默认对service ,和 facade两个包进行处理；-->
	<aop:config proxy-target-class="true">
		<aop:pointcut id="productServiceMethodsCommon" expression="#{configProperties.getValue('ecp.tx.exp','execution(* com.zengshi.ecp.*.service..*.*(..))')}" />
		<aop:pointcut id="productServiceMethodsFacade" expression="#{configProperties.getValue('ecp.tx.exp2','execution(* com.zengshi.ecp.*.facade..*.*(..))')}" />
		<aop:advisor advice-ref="txAdviceCommon" pointcut-ref="productServiceMethodsCommon" />
		<aop:advisor advice-ref="txAdviceCommon" pointcut-ref="productServiceMethodsFacade" />
	</aop:config>

	<tx:advice id="txAdviceCommon" transaction-manager="txManagerCommon">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="regist*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="import*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="pulish*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="execute*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>
			<tx:method name="generate*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception"/>

			<!-- 补充了事务处理 -->
			<tx:method name="joinTransaction" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>

			<tx:method name="list*" propagation="SUPPORTS" read-only="true"  rollback-for="java.lang.Exception"/>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"  rollback-for="java.lang.Exception"/>
			<tx:method name="query*" propagation="SUPPORTS" read-only="true"  rollback-for="java.lang.Exception"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" rollback-for="java.lang.Exception" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

</beans>
